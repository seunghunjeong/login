package com.example.web;


import javax.inject.Inject;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.domain.CEOVO;
import com.example.domain.UserVO;
import com.example.persistence.CEODAO;
import com.example.persistence.UserDAO;

@Controller
public class JoinController {
	//리스트
	@RequestMapping("list")
	public String list(String email, HttpSession session) {
		if(email != null) {
			session.setAttribute("uid", email);
		}
		return "list";
	}
	
	//로그인
	@RequestMapping("login")
	public String login() {
		return "login";
	}
	//관리자 페이지
	@RequestMapping("rpage")
	public String rpage() {
		return "rpage";
	}
	
	//사장 페이지
	@RequestMapping("cpage")
	public String cpage() {
		return "cpage";
	}
	
	//아이디찾기
	@RequestMapping("findId")
	public String findId() {
		return "findId";
	}
	//비밀번호 찾기
	@RequestMapping("findPw")
	public String findPw() {
		return "findPw";
	}
	
	@Inject
	UserDAO dao;
	
	@Inject
	CEODAO cdao;
	
	//로그인
	@RequestMapping("loginPost")
	public String loginPost(UserVO vo, CEOVO cvo, Model model, String uid, String upw, HttpSession session) throws Exception{
		UserVO user=dao.login(vo);
		CEOVO ceo=cdao.login(cvo);
		if(user != null) {	//회원로그인
			model.addAttribute("user", user);
			return "loginPost";
		}else if(ceo != null) {	//사장로그인
			model.addAttribute("ceo", ceo);
			return "cpage";
		}else if(uid.equals("root") && upw.equals("honkey")) {	//관리자로그인
			session.setAttribute("uid", uid);
			return "redirect:rpage";
		}
		return "redirect:login";
	}
	
	
	//로그아웃
	@RequestMapping("logout")
	public String logout(HttpSession session) {
		session.removeAttribute("uid");
		session.removeAttribute("cid");
		return "redirect:login";
	}

	//네이버
	@RequestMapping("naverLogin")
	public String naverLogin() {
		return "naverLogin";
	}
	
	//카카오
	@RequestMapping("kakaoLogin")
	public String kakaoLogin() {
		return "kakaoLogin";
	}
	
	String authNum = "";
	 
    @Resource(name = "loginService")
    private LoginService loginService;
 
    @RequestMapping(value = "/adminError")
    public ModelAndView admin() throws Exception 
    {
        ModelAndView mv = new ModelAndView();
        
        mv.setViewName("error/access");
        return mv;
    }  
    
    // 로그인 폼
    @RequestMapping(value = "/loginForm")
    public ModelAndView loginForm(HttpSession session,HttpServletRequest request) throws Exception {
        ModelAndView mv = new ModelAndView();
        RSAKeySet keySet = new RSAKeySet();
 
        String beforeUrl=request.getHeader("Referer");
        session.setAttribute("Referer",beforeUrl);
        //Referer==http://localhost:8080/3T/main
        
        System.out.println(beforeUrl);
        
        /* 세션에 개인키 저장 */
        session.setAttribute("RSA_private", keySet.getPrivateKey());
        
        /* Front Side로 공개키 전달 */
        mv.addObject("Modulus", keySet.getPublicKeyModulus());
        mv.addObject("Exponent", keySet.getPublicKeyExponent());
        
        mv.setViewName("member/loginForm");
        return mv;
    }   
    
   //로그인 됨
    @SuppressWarnings({ "unchecked", "null" })
    @RequestMapping(value = "/login", method = RequestMethod.POST)
    public ModelAndView loginComplete(CommandMap commandMap, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ModelAndView mv = new ModelAndView();
        RSAKeySet keySet = new RSAKeySet();//암호
        
        HttpSession session = request.getSession();
 
        // 멤버 정보 가져오고
        Map<String, Object> chk2 = loginService.loginGo2(commandMap.getMap(),(Key)session.getAttribute("RSA_private")); //암호화 비번
        Map<String, Object> chk = loginService.loginGo(commandMap.getMap());
 
        
        if (chk2 == null) {
            /* 세션에 개인키 저장 */
            session.setAttribute("RSA_private", keySet.getPrivateKey());
            
            /* Front Side로 공개키 전달 */
            mv.addObject("Modulus", keySet.getPublicKeyModulus());
            mv.addObject("Exponent", keySet.getPublicKeyExponent());
            
            mv.setViewName("member/loginForm");
            mv.addObject("message", "아이디나 비밀번호를 확인해주세요.");
            return mv;
        }
        
        // 아이디 값이 있으면
        else {
            
                // 세션에 아이디를 넣어라
                session.setAttribute("MEMBER_ID", commandMap.get("MEMBER_ID"));
                
                mv.addObject("MEMBER", chk2); //암호화 비번
                
                 // 쿠키 사용한다는게 체크되어 있으면...
                if(commandMap.get("autoLogin") != null)
                {
                    // 쿠키를 생성하고 현재 로그인되어 있을 때 생성되었던 세션을 쿠키에 저장한다.
                    Cookie autoLogin = new Cookie("autoLogin", session.getId());
                    // 쿠키를 찾을 경로를 컨텍스트 경로로 변경해 주고...
                    autoLogin.setPath("/");
                    int amount = 60 * 60 * 24 * 7;
                    autoLogin.setMaxAge(amount); // 단위는 (초)임으로 7일정도로 유효시간을 설정해 준다.
                    // 쿠키를 적용해 준다.
                    response.addCookie(autoLogin); 
                    //
                    String SESSIONKEY = session.getId();
                    // currentTimeMills()가 1/1000초 단위임으로 1000곱해서 더해야함 
                    Date sessionLimit = new Date(System.currentTimeMillis() + (1000*amount));
                    // 현재 세션 id와 유효시간을 사용자 테이블에 저장한다.
                    commandMap.put("MEMBER_ID", commandMap.get("MEMBER_ID"));
                    commandMap.put("SESSIONKEY", SESSIONKEY);
                    commandMap.put("SESSIONLIMIT", sessionLimit);
                    
                    loginService.keepLogin(commandMap.getMap());
                }
 
                }        
}
